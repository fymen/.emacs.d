#+OPTIONS: toc:4 h:4
#+TITLE: Emacs init configuration
* Package management
#+begin_src emacs-lisp
  (require 'use-package)
  (setq use-package-always-ensure t)

  (setq package-archives
      '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
        ("MELPA Stable" . "https://stable.melpa.org/packages/")
        ("MELPA"        . "https://melpa.org/packages/"))
      package-archive-priorities
      '(("GNU ELPA"     . 10)
        ("MELPA"        . 5)
        ("MELPA Stable" . 0)))
#+end_src
** Paradox
#+begin_src emacs-lisp
  (use-package async
               :ensure t)
  (use-package paradox
               :ensure t
               :config
               (setq paradox-execute-asynchronously t))
#+end_src
* Defaults
** Basics
#+begin_src emacs-lisp
  (setq auto-revert-interval 1            ; Refresh buffers fast
      default-input-method "TeX"        ; Use TeX when toggling input method
      echo-keystrokes 0.1               ; Show keystrokes asap
      enable-recursive-minibuffers t    ; Allow recursive minibuffers
      frame-inhibit-implied-resize 1    ; Don't resize frame implicitly
      inhibit-startup-screen t          ; No splash screen please
      initial-scratch-message nil       ; Clean scratch buffer
      recentf-max-saved-items 10000     ; Show more recent files
      ring-bell-function 'ignore        ; Quiet
      scroll-margin 1                   ; Space between cursor and top/bottom
      sentence-end-double-space nil     ; No double space
      custom-file                       ; Customizations in a separate file
      (concat user-emacs-directory "custom.el"))
;; Some mac-bindings interfere with Emacs bindings.
(when (boundp 'mac-pass-command-to-system)
  (setq mac-pass-command-to-system nil))
#+end_src

#+begin_src emacs-lisp
(setq-default tab-width 4                       ; Smaller tabs
              fill-column 79                    ; Maximum line width
              truncate-lines t                  ; Don't fold lines
              indent-tabs-mode nil              ; Use spaces instead of tabs
              split-width-threshold 160         ; Split verticly by default
              split-height-threshold nil        ; Split verticly by default
              frame-resize-pixelwise t          ; Fine-grained frame resize
              frame-title-format "%f %4 %b %Z %* %10 %I"
              x-select-enable-clipboard t
              x-select-enable-primary t
              auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
#+end_src

#+begin_src emacs-lisp
(global-set-key (kbd "C-w") 'backward-kill-word)
(global-set-key (kbd "C-x C-k") 'kill-region)
(global-set-key (kbd "C-x C-b") 'ibuffer-list-buffers)

(global-set-key (kbd "<f8>") 'eshell)
#+end_src
** GUI
#+begin_src emacs-lisp
(when (functionp 'menu-bar-mode)
  (menu-bar-mode -1))
(when (functionp 'set-scroll-bar-mode)
  (set-scroll-bar-mode 'nil))
(when (functionp 'mouse-wheel-mode)
  (mouse-wheel-mode -1))
(when (functionp 'tooltip-mode)
  (tooltip-mode -1))
(when (functionp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (functionp 'blink-cursor-mode)
  (blink-cursor-mode -1))
(when (functionp 'column-number-mode)
  (column-number-mode 1))
(when (functionp 'line-number-mode)
    (line-number-mode 1))
#+end_src
** Prettify symbols
#+begin_src emacs-lisp
  (when (boundp 'global-prettify-symbols-mode)
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (push '("lambda" . ?λ) prettify-symbols-alist)))
  (add-hook 'clojure-mode-hook
            (lambda ()
              (push '("fn" . ?ƒ) prettify-symbols-alist)))
  (global-prettify-symbols-mode +1))
#+end_src
** Color theme
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :init)
  (load-theme 'zenburn t)
#+end_src
** OS related && fonts
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (set-face-attribute 'default nil) 
    (set-face-attribute 'default nil :height 150))

  (when (eq system-type 'gnu/linux)
    (if window-system
        ;; Chinese Font
        (dolist (charset '(kana han symbol cjk-misc bopomofo))
          (set-frame-font "Inconsolata 18")
          (set-fontset-font (frame-parameter nil 'font)
                            charset (font-spec :family "WenQuanYi Micro Hei Mono"
                                               :size 16))
          ;; Default Browser
          (setq browse-url-browser-function 'browse-url-generic
                browse-url-generic-program "firefox"
                browse-url-new-window-flag t)
          )))
#+end_src
** Anzu mode (query & replace highlight)
#+begin_src emacs-lisp
  (use-package anzu
    :config (global-anzu-mode 1)
    (setq anzu-minimum-input-length 4)
    (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
    (global-set-key [remap query-replace] 'anzu-query-replace))
#+end_src
** Modeline
#+begin_src emacs-lisp
(use-package smart-mode-line
  :init
  (setq sml/no-confirm-load-theme t
        powerline-arrow-shape 'curve
        powerline-default-separator-dir '(right . left)
        sml/mode-width 0
        sml/name-width 20
        sml/theme 'powerline)
  :config
  (use-package smart-mode-line-powerline-theme)
  (sml/setup)
  (display-time-mode 1))
#+end_src
** Extra settings
#+begin_src emacs-lisp
(global-hl-line-mode 1)
(fset 'yes-or-no-p 'y-or-n-p)

(dolist (mode
       '(abbrev-mode                  ; E.g. sopl -> System.out.println
         column-number-mode           ; Show column number in mode line
         delete-selection-mode        ; Replace selected text
         dirtrack-mode                ; directory tracking in *shell*
         global-so-long-mode          ; Mitigate performance for long lines
         recentf-mode                 ; Recently opened files
         winner-mode					; “undo” and “redo” changes in WindowConfiguration
         superword-mode
         show-paren-mode))            ; Highlight matching parentheses
(funcall mode 1))
#+end_src
* General
** Key strokes
#+begin_src emacs-lisp
  
#+end_src
** Ediff
#+begin_src emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally)
#+end_src
** Uniquify
#+begin_src emacs-lisp
  ;; Every buffer should have a unique name 
  (require 'uniquify)
  (setq
   uniquify-buffer-name-style 'post-forward
   uniquify-separator ":")
#+end_src
** Hippie expand
#+begin_src emacs-lisp
  ;; hippie expand is dabbrev expand on steroids
  (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-complete-file-name-partially
                                           try-complete-file-name
                                           try-expand-all-abbrevs
                                           try-expand-list
                                           try-expand-line
                                           try-complete-lisp-symbol-partially
                                           try-complete-lisp-symbol))
  (global-set-key (kbd "M-/") 'hippie-expand)
#+end_src
** Smartscan
=M-n= to next symbol, and =M-p= to previous symbol.
Only in elisp and c mode.
#+begin_src emacs-lisp
  (use-package smartscan
    :config
    (add-hook 'emacs-lisp-mode-hook 'smartscan-mode)
    (add-hook 'c-mode-hook 'smartscan-mode))
#+end_src
** Hungry delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :config
    (global-hungry-delete-mode))
#+end_src
** Unfill paragraph
#+begin_src emacs-lisp
  ;;; Stefan Monnier <foo at acm.org>. It is the opposite of
  ;;; fill-paragraph
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
          ;; This would override `fill-column' if it's an integer.
          (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region)))
  ;; Handy key definition
  (define-key global-map "\M-Q" 'unfill-paragraph)
#+end_src
** Smart move to the beginning of line
#+BEGIN_SRC emacs-lisp
  (defun my/smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'my/smarter-move-beginning-of-line)
#+END_SRC
** Window operation
#+BEGIN_SRC emacs-lisp
  (defun my/vsplit-last-buffer (prefix)
    "Split the window vertically and display the previous buffer."
    (interactive "p")
    (split-window-vertically)
    (other-window 1 nil)
    (if (= prefix 1)
        (switch-to-next-buffer)))
  (defun my/hsplit-last-buffer (prefix)
    "Split the window horizontally and display the previous buffer."
    (interactive "p")
    (split-window-horizontally)
    (other-window 1 nil)
    (if (= prefix 1) (switch-to-next-buffer)))

  (global-set-key (kbd "C-x 2") 'my/vsplit-last-buffer)
  (global-set-key (kbd "C-x 3") 'my/hsplit-last-buffer)

  (defun sanityinc/toggle-delete-other-windows ()
    "Delete other windows in frame if any, or restore previous window config."
    (interactive)
    (if (and winner-mode
             (equal (selected-window) (next-window)))
        (winner-undo)
      (delete-other-windows)))

  (global-set-key "\C-x1" 'sanityinc/toggle-delete-other-windows)

  ;;----------------------------------------------------------------------------
  ;; Rearrange split windows
  ;;----------------------------------------------------------------------------
  ;;----------------------------------------------------------------------------
  ;; When splitting window, show (other-buffer) in the new window
  ;;----------------------------------------------------------------------------
  (defun split-window-func-with-other-buffer (split-function)
    (lexical-let ((s-f split-function))
                 (lambda (&optional arg)
                   "Split this window and switch to the new window unless ARG is provided."
                   (interactive "P")
                   (funcall s-f)
                   (let ((target-window (next-window)))
                     (set-window-buffer target-window (other-buffer))
                     (unless arg
                       (select-window target-window))))))

  (defun split-window-horizontally-instead ()
    (interactive)
    (save-excursion
      (delete-other-windows)
      (funcall (split-window-func-with-other-buffer 'split-window-horizontally))))

  (defun split-window-vertically-instead ()
    (interactive)
    (save-excursion
      (delete-other-windows)
      (funcall (split-window-func-with-other-buffer 'split-window-vertically))))

  (global-set-key "\C-x|" 'split-window-horizontally-instead)
  (global-set-key "\C-x_" 'split-window-vertically-instead)
#+END_SRC
** Smart copy/kill-line
#+begin_src emacs-lisp
  ;; Smart copy, if no region active, it simply copy the current whole line
  (defadvice kill-line (before check-position activate)
    (if (member major-mode
                '(emacs-lisp-mode scheme-mode lisp-mode
                                  c-mode c++-mode objc-mode js-mode
                                  latex-mode plain-tex-mode))
        (if (and (eolp) (not (bolp)))
            (progn (forward-char 1)
                   (just-one-space 0)
                   (backward-char 1)))))

  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single line instead."
    (interactive (if mark-active (list (region-beginning) (region-end))
                   (message "Copied line")
                   (list (line-beginning-position)
                         (line-beginning-position 2)))))

  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
             (line-beginning-position 2)))))
#+end_src
** ibuffer-vc
#+begin_src emacs-lisp
  (use-package ibuffer-vc
    :config
    (add-hook 'ibuffer-hook
              (lambda ()
                (ibuffer-vc-set-filter-groups-by-vc-root)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic))))
    (setq ibuffer-formats
          '((mark modified read-only vc-status-mini " "
                  (name 18 18 :left :elide)
                  " "
                  (size 9 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " "
                  (vc-status 16 16 :left)
                  " "
                filename-and-process))))
#+end_src
** narrow-or-widen-dwim
   #+BEGIN_SRC emacs-lisp
     (defun narrow-or-widen-dwim (p)
       "If the buffer is narrowed, it widens. Otherwise, it narrows
     intelligently.  Intelligently means: region, org-src-block,
     org-subtree, or defun, whichever applies first.  Narrowing to
     org-src-block actually calls `org-edit-src-code'.

     With prefix P, don't widen, just narrow even if buffer is already
     narrowed."
       (interactive "P")
       (declare (interactive-only))
       (cond ((and (buffer-narrowed-p) (not p)) (widen))
             ((and (boundp 'org-src-mode) org-src-mode (not p))
              (org-edit-src-exit))
             ((region-active-p)
              (narrow-to-region (region-beginning) (region-end)))
             ((derived-mode-p 'org-mode)
              (cond ((ignore-errors (org-edit-src-code)))
                    ((org-at-block-p)
                     (org-narrow-to-block))
                    (t (org-narrow-to-subtree))))
             ((derived-mode-p 'prog-mode) (narrow-to-defun))
             (t (error "Please select a region to narrow to"))))

     (global-set-key (kbd "C-x n n") 'narrow-or-widen-dwim)

   #+END_SRC
** Desktop save
#+begin_src emacs-lisp
  (desktop-save-mode 1)
#+end_src

* Extensions
** ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :bind ("C-=" . ace-window))
#+end_src
** beacon-mode
#+begin_src emacs-lisp
  (use-package beacon
    :diminish beacon-mode
    :init
    (beacon-mode 1)
    (setq beacon-push-mark 35)
    (setq beacon-color "#666600"))
#+end_src
** Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-mode)
  (use-package rainbow-delimiters
    :config
    (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'c-mode-hook 'rainbow-delimiters-mode))
#+end_src
** Expand region
#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+end_src
** nyan cat
#+begin_src emacs-lisp
  (use-package nyan-mode
    :config
    (nyan-mode 1))
#+end_src
** Key frequency
#+begin_src emacs-lisp
  (use-package keyfreq
    :init
    :config
    (setq keyfreq-excluded-commands
          '(self-insert-command
            abort-recursive-edit
            forward-char
            backward-char
            previous-line
            next-line))
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+end_src
** Olivetti (for prose writing)
#+begin_src emacs-lisp
  ;; Minor mode for a nice writing environment
  (use-package olivetti
    :defer t
    :bind ("C-c o" . olivetti-mode)
    :config
    (setq-default olivetti-body-width (+ fill-column 3)))
#+end_src
** Focus (dim surounding texts)
#+begin_src emacs-lisp
  ;; Dim color of text in surrounding sections
  (use-package focus
    :defer t
    :bind ("C-c f" . focus-mode))
#+end_src
** Word count
#+begin_src emacs-lisp
  (use-package wc-mode)
#+end_src
** Multiple cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind (;("C-M" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)))
#+end_src
** Smart comment
   #+begin_src emacs-lisp
   (use-package comment-dwim-2
     :bind ("M-;" . comment-dwim-2))
   #+end_src
** Auto completion
#+begin_src emacs-lisp
;; Modular text completion framework
(use-package corfu
  :init
  (global-corfu-mode 1)
  (corfu-popupinfo-mode 1)
  :config
  (setq corfu-cycle t
        corfu-auto t
        corfu-auto-delay 0
        corfu-auto-prefix 2
        corfu-quit-at-boundary 'separator
        corfu-popupinfo-delay 0.5))
;; Emacs completion style that matches multiple regexps in any order
(use-package orderless
  :ensure t
  :config
  (setq completion-styles '(orderless basic partial-completion)
        completion-category-overrides '((file (styles basic partial-completion)))
        orderless-component-separator "[ |]"))
#+end_src

* Program
** cc-mode
#+begin_src emacs-lisp
  (defun linux-c-mode()
    (define-key c-mode-map [return] 'newline-and-indent)
    (interactive)
    (c-set-style "K&R")
    (c-toggle-auto-state)
    (setq c-basic-offset 8)
    (setq indent-tabs-mode nil)
    (c-toggle-hungry-state)
    (imenu-add-menubar-index)
    (which-function-mode)
    (c-toggle-auto-newline 1)
    (c-set-offset 'inextern-lang 0)
    )

  (defun linux-cpp-mode()
    (define-key c++-mode-map [return] 'newline-and-indent)
    (define-key c++-mode-map [(control c) (c)] 'compile)
    (interactive)
    (c-set-style "K&R")
    (c-toggle-auto-state)
    (c-toggle-hungry-state)

    (setq c++-tab-always-indent t)
        (setq c-basic-offset 3)
        (setq indent-tabs-mode nil)
        (imenu-add-menubar-index)
        (which-function-mode)
        (c-set-offset 'inextern-lang 0))

  (add-hook 'c-mode-hook 'linux-c-mode)
  (add-hook 'c++-mode-hook 'linux-cpp-mode)

  (use-package color-identifiers-mode
    :config
    (add-hook 'c-mode-hook 'color-identifiers-mode)
    (add-hook 'c++-mode-hook 'color-identifiers-mode))
#+end_src
** Makefile
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("[Mm]akefile*" . makefile-gmake-mode))
(defun prelude-makefile-mode-defaults ()
  (setq indent-tabs-mode t ))

(setq prelude-makefile-mode-hook 'prelude-makefile-mode-defaults)

(add-hook 'makefile-mode-hook (lambda ()
                                (run-hooks 'prelude-makefile-mode-hook)))
#+END_SRC

** Markdown
#+begin_src emacs-lisp
;; Emacs Major mode for Markdown-formatted files
(use-package markdown-mode
  :defer t)
#+end_src
** dtrt-indent
#+BEGIN_SRC emacs-lisp
(use-package dtrt-indent)
(add-hook 'c-mode-common-hook
          (lambda()
            (require 'dtrt-indent)
            ;; (setq dtrt-indent-verbosity 0)
            (dtrt-indent-mode t)))
#+END_SRC

** Fly spell
#+begin_src emacs-lisp
(defun cycle-languages ()
  "Changes the ispell dictionary to the first element in
ISPELL-LANGUAGES, and returns an interactive function that cycles
the languages in ISPELL-LANGUAGES when invoked."
  (let ((ispell-languages (list "american" "norsk")))
    (lambda ()
      (interactive)
      ;; Rotates the languages cycle and changes the ispell dictionary.
      (let ((rotated (nconc (cdr ispell-languages) (list (car ispell-languages)))))
        (ispell-change-dictionary (car (setq ispell-languages rotated)))))))

(use-package flyspell
  :defer t
  :if (executable-find "aspell")
  :hook ((text-mode . flyspell-mode)
         (prog-mode . flyspell-prog-mode)
         (flyspell-mode . (lambda ()
                            (local-set-key
                             (kbd "C-c l")
                             (cycle-languages)))))
  :config
  (ispell-change-dictionary "american" t))
#+end_src
** Magit
#+begin_src emacs-lisp
  ;; A Git porcelain inside Emacs.
  (use-package magit
    :bind ("C-x g" . magit-status))
#+end_src
** TODO Editor config
#+begin_src emacs-lisp
  ;; EditorConfig Emacs Plugin
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
#+end_src
** Helm
*** Basic
***  setting
#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :config
  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t)

  :bind (("C-c h" . helm-command-prefix)
         ("M-x" . helm-M-x)
         ("C-x y" . helm-show-kill-ring)
         ("C-x b" . helm-mini)
         ("C-x C-f" . helm-find-files)
         ("M-i" . helm-occur)
         :map helm-command-map
         ("C-i" . helm-execute-persistent-action)
         ("C-i" . helm-select-action)
         ("<tab>" . helm-execute-persistent-action))
  )

(global-unset-key (kbd "C-x c"))
#+end_src
*** Helm gtags
#+begin_src emacs-lisp
(use-package helm-gtags
  :after helm                      
  :config
  (setq helm-gtags-auto-update t)
  (setq helm-gtags-update-interval-second 60)
  :bind (:map helm-gtags-mode-map
              ("M-t" . helm-gtags-find-tag)
              ("M-r" . helm-gtags-find-rtag)
              ("M-s" . helm-gtags-find-symbol)
              ("M-g M-p" . helm-gtags-parse-file)
              ("C-c <" . helm-gtags-previous-history)
              ("C-c >" . helm-gtags-next-history)
              ("M-," . helm-gtags-pop-stack))
  :hook ((c-mode-hook . helm-gtags-mode)
         (c++-mode-hook . helm-gtags-mode)
         (asm-mode-hook . helm-gtags-mode)))
#+end_src
*** Helm projectile
#+begin_src emacs-lisp
(use-package helm-projectile
  :diminish t
  :after helm
  :bind (("C-c p f" . helm-projectile-find-file-dwim)
         ("C-c p p" . helm-projectile-switch-project)
         ("C-c p b" . helm-projectile-switch-to-buffer)
         ("C-c p g" . helm-projectile-grep)))

(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)

(setq projectile-enable-caching t)
#+end_src
** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :diminish t
  :init
  (setq helm-yas-space-match-any-greedy t)
  (setq yas-prompt-functions '(yas-dropdown-prompt
                               yas-ido-prompt
                               yas-completing-prompt))
  :config
  (use-package helm-c-yasnippet)
  (yas-global-mode 1)
  (add-hook 'term-mode-hook (lambda()
                              (yas-minor-mode -1))))
#+end_src

** Compilation
#+begin_src emacs-lisp
(defun prelude-colorize-compilation-buffer ()
  "Colorize a compilation mode buffer."
  (interactive)
  ;; we don't want to mess with child modes such as grep-mode, ack, ag, etc
  (when (eq major-mode 'compilation-mode)
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max)))))
(setq compilation-ask-about-save nil          ; Just save before compiling
      compilation-always-kill t               ; Just kill old compile processes before starting the new one
      compilation-scroll-output 'first-error) ; Automatically scroll to first
(use-package cd-compile
  :bind ("<f5>" . cd-compile))
#+end_src

** TODO Eglot
* Org mode
** Basics
#+begin_src emacs-lisp
(use-package org
  :defer t
  :bind (:map org-mode-map
         ("M-;" . org-comment-dwim))
  :config
  (setq org-adapt-indentation t
        org-hide-leading-stars t
        org-hide-emphasis-markers t
        org-pretty-entities t
        org-src-fontify-natively t
        org-edit-src-content-indentation 0
        org-ellipsis "⤵"))
#+end_src
** org-babel
#+begin_src emacs-lisp
(use-package gnuplot)
(use-package plantuml-mode)
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)
   (dot . t)
   (ditaa . t)
   (python . t)
   (gnuplot . t)
   (plantuml . t)
   (emacs-lisp . t)
   ))
;; Install plantuml.jar by: sudo apt install plantuml
(setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
(setq puml-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
#+end_src
** Org bullets & modern
#+begin_src emacs-lisp
(use-package org-bullets
  :init
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))
  (add-hook 'org-mode-hook (lambda () (org-indent-mode t))))

;; Modern looks for Org
(use-package org-modern
  :after org
  :hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-block-fringe nil))
#+end_src
** org-journal
#+begin_src emacs-lisp
(use-package org-journal
  :init
  (setq org-journal-dir "~/org/journal/")
  (setq org-journal-date-format "%A, %d %B %Y"))
#+end_src
** org-ai
#+begin_src emacs-lisp
(use-package org-ai
  :ensure t
  :commands (org-ai-mode
             org-ai-global-mode)
  :init
  (add-hook 'org-mode-hook #'org-ai-mode) ; enable org-ai in org-mode
  (org-ai-global-mode) ; installs global keybindings on C-c M-a
  :config
  (setq org-ai-default-chat-model "gpt-3.5-turbo") ; if you are on the gpt-4 beta:
  (setq org-ai-openai-api-token "xxx")
  (org-ai-install-yasnippets)) ; if you are using yasnippet and want `ai` snippets
#+end_src
** Latex
#+begin_src emacs-lisp
(require 'ox-latex)
(require 'ox-beamer)
(setq org-latex-images-centered 't)

(setq org-latex-coding-system 'utf-8)

(setf org-latex-default-packages-alist
      (remove '("AUTO" "inputenc" t) org-latex-default-packages-alist))
(setf org-latex-default-packages-alist
      (remove '("T1" "fontenc" t) org-latex-default-packages-alist))

(setq org-latex-pdf-process '("xelatex -8bit -shell-escape  %f"
                              "xelatex -8bit -shell-escape  %f"))
(setq org-latex-packages-alist
      '("
        \\hypersetup{ colorlinks,% 
                linkcolor=blue,% 
                citecolor=black,%
                urlcolor=black,%
                filecolor=black
               }

        \\usepackage{array}
        \\usepackage{xcolor}
        \\definecolor{bg}{rgb}{0.95,0.95,0.95}"))

(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
(setq org-latex-minted-options
      '(
        ("bgcolor" "bg")
        ("frame" "lines")
        ("linenos" "")
        ("fontsize" "\\scriptsize")
        ))

(add-to-list 'org-latex-classes
             '("article-cn"
              "\\documentclass[11pt]{article}
                [DEFAULT-PACKAGES]
                [PACKAGES]
                \\usepackage{fontspec}

                \\XeTeXlinebreaklocale ``zh''
                \\XeTeXlinebreakskip = 0pt plus 1pt minus 0.1pt
                \\newcommand\\fontnamehei{WenQuanYi Zen Hei}
                \\newcommand\\fontnamesong{AR PL UMing CN}
                \\newcommand\\fontnamekai{AR PL KaitiM GB}
                \\newcommand\\fontnamemono{FreeMono}
                \\newcommand\\fontnameroman{FreeSans}
                \\setmainfont[BoldFont=\\fontnamehei]{\\fontnamesong}
                \\setsansfont[BoldFont=\\fontnamehei]{\\fontnamekai}
                \\setmonofont{\\fontnamemono}
                \\setromanfont[BoldFont=\\fontnamehei]{\\fontnamesong}
                \\makeatletter
                \\def\\verbatim@font{\\rmfamily\\small} %verbatim中使用roman字体族
                \\makeatother"

              ("\\section{%s}" . "\\section*{%s}")
              ("\\subsection{%s}" . "\\subsection*{%s}")
              ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
              ("\\paragraph{%s}" . "\\paragraph*{%s}")
              ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("article-img"
              "\\documentclass[11pt]{article}
                [DEFAULT-PACKAGES]
                [PACKAGES]
                \\usepackage{geometry}
                \\geometry{left=1.5cm,right=1.5cm,top=1.5cm,bottom=1.5cm}"
              ("\\section{%s}" . "\\section*{%s}")
              ("\\subsection{%s}" . "\\subsection*{%s}")
              ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
              ("\\paragraph{%s}" . "\\paragraph*{%s}")
              ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
* Other tools
** Dictionary
#+begin_src emacs-lisp
;; display the definition of word at point
(use-package define-word
  :defer t
  :bind ("C-c d" . define-word-at-point))
#+end_src
** Which key (show available keybindings)
#+begin_src emacs-lisp
;; Display available keybindings in popup
(use-package which-key
  :config
  (which-key-mode 1))
#+end_src
